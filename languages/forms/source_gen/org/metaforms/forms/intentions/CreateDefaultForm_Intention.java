package org.metaforms.forms.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.intentions.Intention;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public class CreateDefaultForm_Intention extends BaseIntention implements Intention {
  public CreateDefaultForm_Intention() {
  }

  public String getConcept() {
    return "org.metaforms.domain.structure.Document";
  }

  public boolean isParameterized() {
    return false;
  }

  public boolean isErrorIntention() {
    return false;
  }

  public boolean isAvailableInChildNodes() {
    return true;
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0444\u043e\u0440\u043c\u0443 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0434\u043b\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430";
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    SNode form = SNodeFactoryOperations.createNewNode("org.metaforms.forms.structure.Form", null);
    SPropertyOperations.set(form, "name", SPropertyOperations.getString(node, "name"));
    SLinkOperations.setTarget(form, "documentReference", SNodeFactoryOperations.createNewNode("org.metaforms.domain.structure.DocumentReference", null), true);
    SLinkOperations.setTarget(SLinkOperations.getTarget(form, "documentReference", true), "document", node, false);
    SPropertyOperations.set(form, "id", SPropertyOperations.getString(node, "id") + "Form");
    editorContext.getModel().addRoot(form);

    SNode panel = SNodeFactoryOperations.createNewNode("org.metaforms.forms.structure.FormPanel", null);
    SLinkOperations.setTarget(form, "container", panel, true);

    for (SNode field : ListSequence.fromList(SLinkOperations.getTargets(node, "field", true))) {
      SNode fld;
      fld = SNodeFactoryOperations.createNewNode("org.metaforms.forms.structure.TextField", null);
      SPropertyOperations.set(fld, "fieldLabel", SPropertyOperations.getString(field, "name"));
      SLinkOperations.setTarget(fld, "fieldReference", SNodeFactoryOperations.createNewNode("org.metaforms.domain.structure.FieldReference", null), true);
      SLinkOperations.setTarget(SLinkOperations.getTarget(fld, "fieldReference", true), "field", field, false);
      ListSequence.fromList(SLinkOperations.getTargets(panel, "components", true)).addElement(fld);
    }
  }

  public String getLocationString() {
    return "org.metaforms.forms.intentions";
  }
}
